/**
*   策略模式
*   Definition: Define a family of algorithms, encapsulate each one,and make them interchangeable.
*               定义一组算法，将每个算法都封装起来，并且是它们之间可以互换。
*
*   Roles:
*       1. Context : 上下文角色，起到承上启下的作用，屏蔽高层模块对策略算法的直接访问，它持有一个Strategy类的引用。
*       2. Strategy: 抽象策略角色，该角色对策略、算法进行抽象，通过常定义每个策略或算法必须具有的方法和属性。
*       3. Concrete Strategy: 该角色实现抽象策略中的具体操作，含有具体的算法。
*
*   Advantages:
*       1. 策略模式提供了管理相关算法族的办法。策略类的等级结构定义了一个算法或行为族，恰当地使用可以把公共的代码移到父类中，从而避免代码重复。
*       2. 策略模式提供可以替换继承关系的办法。继承可以处理多种算法或行为，如果不用策略模式，那么使用算法或行为的环境类可能会有一些子类，
*          每个子类提供一个不同的算法或行为。但是，这样算法或者行为的使用者就和算法本身混在一起，从而不可能再独立演化。
*       3. 使用策略模式可以避免使用多重条件转移语句。多重转移语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，
*          统统列在一个多重转移语句里面，这比使用继承的办法还要原始和落后。
*
*   DisAdvantages:
*       1. 客户端必须了解所有的策略，选择使用哪一个。
*       2. 生成很多策略类。可以使用享元模式减少对象数量。
*
*    使用场景:
*       1. 多个类，旨在算法或者行为上稍有不同。
*       2. 算法需要自由切换的场景。
*       3. 需要屏蔽算法规则的场景。
*
*
*
*
*
*
*/
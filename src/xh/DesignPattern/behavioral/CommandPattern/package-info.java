/**
*       Command Pattern 命令模式 又名： 行动模式 、 交易模式
*       Definition: Encapsulate a request as an object, thereby letting you parameterize clients with different requests,
*                   queue or log requests, and support undoable operations.
*                将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。
*
*       Roles:
*               Command: 命令角色，声明 一个给所有具体命令类的抽象接口，定义需要执行的命令。
*               Concrete Command: 具体命令，该角色定义一个接收者和行为之间的弱耦合，实现命令方法，并调用接收者的相应操作。
*               Invoker: 调用者，该角色负责调用命令对象执行请求。
*               Receiver: 接收者，负责具体实施和执行一个请求。
*
*       Advantages:
*               1. 类间解耦，调用者和接收者角色之间没有任何依赖关系，调用者实现功能是只需要调用Command中的execute方法
*               2. 可扩展性。
*               2. 命令模式结合其他模式会更优秀，命令模式可以集合责任链模式，实现命令族解析任务，结合模板方法模式可以减少Command子类的膨胀问题。
*
*      DisAdvantages:
*               1. 导致系统中出现过多的具体命令类。
*
*       使用场景:
*               1. 使用命令模式作为“回调”在面向对象系统中的替代。
*               2. 需要在不同的时间指定请求、将请求排队。
*               3. 系统需要支持命令的撤销。命令对象可以把状态存储起来，等客户端需要撤销时，可以调用undo方法，将命令产生的效过撤销。
*               4. 需要将系统中所有的数据更新操作保存到日志里，以便在系统崩溃时，可以根据日志读回所有的数据更新命令，重新执行恢复。
*               5. 一个系统需要支持交易。一个交易结构封装了一组数据更新命令，使用命令模式来实现交易结构可以使系统增加新的交易类型。
*
*
*
*
*/